variables:
  agent-pool: 'Docker-pool'
  isPrimary: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  srcDir: '$(System.DefaultWorkingDirectory)/src'
  GO111MODULE: 'auto'

stages:
  - stage: Tests
    displayName: 'Tests'
    jobs:
      - job: Tests
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: GoTool@0
            inputs:
              version: '1.23.2'
          - bash: |
              cd src/
              go test $(go list ./... | grep -v '/functional_tests')
            displayName: 'Run unit tests'
          - bash: |
              docker compose -f azure_pipelines/docker-compose.functional_tests.yml up -d
            displayName: 'Docker compose postgres'
          - task: Go@0
            inputs:
              command: 'test'
              arguments: 'github.com/dfds/confluent-gateway/functional_tests'
              workingDirectory: '$(srcDir)'
            displayName: 'Functional tests'

  - stage: CD
    displayName: 'Build, deliver deployment artifacts'
    jobs:
      - job: CD
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: GoTool@0
            inputs:
              version: '1.23.2'
          - bash: |
              make clean-restore-build
            displayName: 'Build'
          - bash: |
              chmod +x ./tools/push-container.sh
              make docker-build-push BUILD_NUMBER="$(Build.BuildNumber)"
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              ALLOW_PUSH_CONTAINER: $(ALLOW_PUSH_CONTAINER)
            displayName: 'Push Docker Images'
            condition: succeeded()
          - bash: |
              make manifests BUILD_NUMBER="$(Build.BuildNumber)"
            displayName: 'Create k8s manifests'
          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: manifests"
            inputs:
              PathtoPublish: '$(System.DefaultWorkingDirectory)/.output/manifests'
              ArtifactName: manifests

  - stage: Deploy
    condition: and(succeeded(), eq(variables.isPrimary, true))
    dependsOn: CD
    displayName: 'Deployments'
    jobs:
      - job: Production
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: none
          - download: current
            artifact: manifests
            displayName: 'Download build artifacts'
          - publish: '$(Pipeline.Workspace)/manifests/'
            artifact: deployed-manifests
            displayName: 'Publish manifests'
          - task: Kubernetes@1
            displayName: kubectl apply
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: Kubernetes-Hellman-selfservice-deploy
              cwd: '$(Pipeline.Workspace)/manifests/'
              command: apply
              arguments: -f .
